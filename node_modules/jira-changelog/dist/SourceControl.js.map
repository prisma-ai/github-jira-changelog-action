{"version":3,"sources":["../src/SourceControl.js"],"names":["SourceControl","constructor","config","slack","Slack","getCommitLogs","workspaceDir","range","workspace","Promise","resolve","reject","opts","format","revision","date","summary","fullText","authorName","authorEmail","log","err","response","logs","all","promises","map","findUser","catch","console","then","slackUser","push"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCe,MAAMA,aAAN,CAAoB;AAEjCC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKC,KAAL,GAAa,IAAIC,cAAJ,CAAUF,MAAV,CAAb;AACD;AAED;;;;;;;;;;AAQAG,EAAAA,aAAa,CAACC,YAAD,EAAeC,KAAf,EAAsB;AACjC,UAAMC,SAAS,GAAG,wBAAIF,YAAJ,CAAlB;AAEA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEtC,YAAMC,IAAI;AACRC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE,IADJ;AAENC,UAAAA,IAAI,EAAE,KAFA;AAGNC,UAAAA,OAAO,EAAE,MAHH;AAINC,UAAAA,QAAQ,EAAE,QAJJ;AAKNC,UAAAA,UAAU,EAAE,KALN;AAMNC,UAAAA,WAAW,EAAE;AANP,SADA;AASR,uBAAe;AATP,SAULZ,KAVK,CAAV;;AAaAC,MAAAA,SAAS,CAACY,GAAV,CAAcR,IAAd,EAAoB,CAACS,GAAD,EAAMC,QAAN,KAAmB;AACrC,YAAID,GAAJ,EAAS;AACP,iBAAOV,MAAM,CAACU,GAAD,CAAb;AACD;;AAED,cAAME,IAAI,GAAGD,QAAQ,CAACE,GAAtB,CALqC,CAOrC;;AACA,cAAMC,QAAQ,GAAGF,IAAI,CAACG,GAAL,CAAUN,GAAD,IAAS;AACjC,iBAAO,KAAKjB,KAAL,CAAWwB,QAAX,CAAoBP,GAAG,CAACD,WAAxB,EAAqCC,GAAG,CAACF,UAAzC,EACJU,KADI,CACGP,GAAD,IAAS;AAAEQ,YAAAA,OAAO,CAACT,GAAR,CAAYC,GAAZ;AAAmB,WADhC,EACkC;AADlC,WAEJS,IAFI,CAEEC,SAAD,IAAe;AACnBX,YAAAA,GAAG,CAACW,SAAJ,GAAgBA,SAAhB;AACA,mBAAOX,GAAP;AACD,WALI,CAAP;AAMD,SAPgB,CAAjB;AAQAK,QAAAA,QAAQ,CAACO,IAAT,CAAcvB,OAAO,CAACC,OAAR,EAAd;AAEAD,QAAAA,OAAO,CAACe,GAAR,CAAYC,QAAZ,EAAsBK,IAAtB,CAA2B,MAAM;AAC/BpB,UAAAA,OAAO,CAACa,IAAD,CAAP;AACD,SAFD;AAGD,OArBD;AAsBD,KArCM,CAAP;AAsCD;;AAvDgC","sourcesContent":["import Slack from './Slack';\nimport git from 'simple-git';\n\n/**\n * Connect to the source control system and return commit logs for a range.\n * Currenty this only connects to git.\n *\n * Range Object\n * ------------\n * The range object should contain at least one of the following properties:\n * ```\n * {\n *   from:   {String}  The commit revision or branch name to start from, inclusive.\n *   to:     {String}  The commit revision or branch name to go to, inclusive.\n *   after:  {DateStr} Only commits after this date.\n *   before: {DateStr} Only comits before this date.\n * }\n * ```\n *\n *\n * Commit Log Object\n * ------------------\n * Each commit log object will look like the following:\n *\n * ```\n * {\n *   revision: <commit revision hash>,\n *   date: <date>,\n *   summary: <short commit message>,\n *   fullText: <full commit message>,\n *   authorName: <name of commit author>,\n *   authorEmail: <email of commit author>,\n *   slackUser: <object of slack user, as matched by authorEmail>\n * }\n * ```\n *\n */\nexport default class SourceControl {\n\n  constructor(config) {\n    this.slack = new Slack(config);\n  }\n\n  /**\n   * Return commit logs for a range.\n   *\n   * @param {String} dir The source control workspace directory.\n   * @param {Object} range An object defining the range boundaries (see above)\n   *\n   * @return {Promsie} Resolves to a list of commit objects\n   */\n  getCommitLogs(workspaceDir, range) {\n    const workspace = git(workspaceDir);\n\n    return new Promise((resolve, reject) => {\n\n      const opts = {\n        format: {\n          revision: '%H',\n          date: '%ai',\n          summary: '%s%d',\n          fullText: '%s%d%b',\n          authorName: '%aN',\n          authorEmail: '%ae'\n        },\n        '--no-merges': true,\n        ...range\n      }\n\n      workspace.log(opts, (err, response) => {\n        if (err) {\n          return reject(err);\n        }\n\n        const logs = response.all;\n\n        // Add slack users to commit logs\n        const promises = logs.map((log) => {\n          return this.slack.findUser(log.authorEmail, log.authorName)\n            .catch((err) => { console.log(err); }) // ignore errors\n            .then((slackUser) => {\n              log.slackUser = slackUser;\n              return log;\n            });\n        });\n        promises.push(Promise.resolve());\n\n        Promise.all(promises).then(() => {\n          resolve(logs);\n        });\n      });\n    });\n  }\n}\n"],"file":"SourceControl.js"}