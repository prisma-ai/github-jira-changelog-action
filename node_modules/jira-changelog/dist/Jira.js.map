{"version":3,"sources":["../src/Jira.js"],"names":["promiseThrottle","PromiseThrottle","requestsPerSecond","promiseImplementation","Promise","Jira","constructor","config","slack","Slack","jira","undefined","releaseVersions","ticketPromises","host","username","password","api","email","token","console","warn","JiraApi","protocol","apiVersion","strictSSL","generate","commitLogs","releaseVersion","logs","promises","map","commit","findJiraInCommit","then","log","push","resolve","all","ticketsHash","ticketsList","forEach","tickets","ticket","id","Object","keys","k","length","addTicketsToReleaseVersion","e","Error","commitLog","assign","found","configPattern","ticketIDPattern","ticketPattern","RegExp","source","flags","replace","getTickets","ticketMatch","key","match","toUpperCase","getJiraTicketForCommit","catch","ticketKey","promise","add","getJiraIssue","bind","includeTicket","versionName","versionPromises","updateTicketVersion","project","fields","verPromise","createProjectVersion","ver","projectKey","versionObj","fixVersions","name","updateIssue","err","JSON","stringify","searchName","toLowerCase","versions","getVersions","exists","find","v","result","createVersion","ticketId","reject","findIssue","origTicket","findUser","reporter","emailAddress","displayName","slackUser","type","issuetype","Array","isArray","includeIssueTypes","includes","excludeIssueTypes","searchPattern","fullText"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\";\nimport JiraApi from 'jira-client';\nimport PromiseThrottle from 'promise-throttle';\nimport Slack from './Slack';\n\nconst promiseThrottle = new PromiseThrottle({\n  requestsPerSecond: 10,\n  promiseImplementation: Promise\n});\n\n/**\n * Generate changelog by matching source control commit logs to jiar tickets.\n */\nexport default class Jira {\n\n  constructor(config) {\n    this.config = config;\n    this.slack = new Slack(config);\n    this.jira = undefined;\n    this.releaseVersions = [];\n    this.ticketPromises = {};\n\n    const { host, username, password} = config.jira.api;\n    let { email, token } = config.jira.api;\n\n    if (!token && typeof password !== 'undefined') {\n      console.warn('WARNING: Jira password is deprecated. Use an API token instead.');\n      token = password\n    }\n    if (!email && typeof username !== 'undefined') {\n      console.warn('WARNING: Jira username is deprecated for API authentication. Use user email instead.');\n      email = username\n    }\n\n    if (config.jira.api.host) {\n      this.jira = new JiraApi({\n        host,\n        username: email,\n        password: token,\n        protocol: 'https',\n        apiVersion: 2,\n        strictSSL: true\n      });\n    }\n  }\n\n  /**\n   * Generate changelog by matching source control commit logs to jira tickets\n   * and, optionally, creating the release version.\n   *\n   * @param {Array} commitLogs - A list of source control commit logs.\n   * @param {String} releaseVersion - The name of the release version to create.\n   * @return {Object}\n   */\n  async generate(commitLogs, releaseVersion) {\n    const logs = [];\n    this.releaseVersions = [];\n    try {\n\n      const promises = commitLogs.map((commit) => {\n        return this.findJiraInCommit(commit, releaseVersion)\n          .then((log) => { logs.push(log); });\n      });\n      promises.push(Promise.resolve()); // ensure at least one\n\n      return Promise.all(promises)\n        // Add to release version\n        .then(() => {\n\n          // Get all Jira tickets (filter out duplicates by keying on ID)\n          let ticketsHash = {};\n          let ticketsList = [];\n          logs.forEach((log) => {\n            log.tickets.forEach(ticket => ticketsHash[ticket.id] = ticket);\n          });\n          ticketsList = Object.keys(ticketsHash).map(k => ticketsHash[k]);\n\n          // If there are Jira tickets, create a release for them\n          if (ticketsList.length && releaseVersion) {\n            return this.addTicketsToReleaseVersion(ticketsList, releaseVersion).then(() => logs);\n          }\n\n          return logs;\n        });\n    } catch(e) {\n      throw new Error(e);\n    }\n  }\n\n  /**\n   * Find JIRA ticket numbers in a commit log, and automatically load the\n   * ticket info for it.\n   *\n   * @param {Object} commitLog - Commit log object\n   * @param {String} releaseVersion - Release version eg, mobileweb-1.8.0\n   * @return {Promsie} Resolves to an object with a jira array property\n   */\n  findJiraInCommit(commitLog) {\n    const log = Object.assign({tickets: []}, commitLog);\n    const promises = [];\n    const found = {};\n\n    const configPattern = this.config.jira.ticketIDPattern;\n    const ticketPattern = new RegExp(configPattern.source, configPattern.flags.replace('g', ''));\n\n    // Search for jira ticket numbers in the commit text\n    const tickets = this.getTickets(log);\n    tickets.forEach((ticketMatch) => {\n\n      // Get the ticket key, and skip loading if we already got this one\n      let key = ticketMatch.match(ticketPattern);\n      key = (key.length > 1) ? key[1] : key[0];\n      if (!key) {\n        return;\n      }\n      key = key.toUpperCase();\n      if (found[key]){\n        return;\n      }\n      found[key] = true;\n\n      promises.push(\n        this.getJiraTicketForCommit(log, key).catch(() => {}) // ignore errors\n      );\n    });\n\n    // Resolve log when all jira promises are done\n    return Promise.all(promises).then(() => log);\n  }\n\n  /**\n   * Load a Jira issue ticket for a commit object\n   *\n   * @param {Object} commitLog - Commit log object\n   * @param {String} ticketKey - The Jira ticket ID key\n   *\n   * @return {Promise}\n   */\n  getJiraTicketForCommit(commitLog, ticketKey) {\n    if (!ticketKey) {\n      return Promise.resolve();\n    }\n\n    // Get Jira issue ticket object\n    let promise = this.ticketPromises[ticketKey];\n    if (!promise) {\n      promise = promiseThrottle.add(\n        this.getJiraIssue.bind(this, ticketKey)\n      );\n      promise.catch(() => {\n        console.log(`Ticket ${ticketKey} not found`);\n      });\n      this.ticketPromises[ticketKey] = promise;\n    }\n\n    // Add to commit\n    promise.then((ticket) => {\n      if (this.includeTicket(ticket)) {\n        commitLog.tickets.push(ticket);\n        return ticket;\n      }\n    });\n\n    return promise;\n  }\n\n  /**\n   * Creates a release version and assigns tickets to it.\n   *\n   * @param {Array} ticket - List of Jira ticket objects\n   * @param {String} versionName - The name of the release version to add the ticket to.\n   * @return {Promise}\n   */\n  async addTicketsToReleaseVersion(tickets, versionName) {\n    const versionPromises = {};\n    this.releaseVersions = [];\n\n    // Create version and add it to a ticket\n    function updateTicketVersion(ticket) {\n      const project = ticket.fields.project.key;\n\n      // Create version on project\n      let verPromise;\n      if (versionPromises[project]) {\n        verPromise = versionPromises[project];\n      } else {\n        verPromise = this.createProjectVersion(versionName, project);\n        versionPromises[project] = verPromise;\n\n        // Add to list of releases\n        verPromise.then((ver) => {\n          ver.projectKey = project;\n          this.releaseVersions.push(ver);\n        });\n      }\n\n      // Add version to ticket\n      return verPromise\n        .then((versionObj) => {\n          const { fixVersions} = ticket.fields;\n          fixVersions.push({ name: versionObj.name });\n          return this.jira.updateIssue(ticket.id, {\n            fields: { fixVersions }\n          })\n        });\n    }\n\n    // Loop through tickets and throttle the promises.\n    const promises = tickets.map((ticket) => {\n      return promiseThrottle\n        .add(updateTicketVersion.bind(this, ticket))\n        .catch((err) => {\n          console.log(JSON.stringify(err, null, '  '));\n          console.log(`Could not assign ticket ${ticket.key} to release '${versionName}'!`);\n        });\n    });\n    return Promise.all(promises);\n  }\n\n  /**\n   * Add a version to a single project, if it doesn't current exist\n   * @param {String} versionName - The version name\n   * @param {Array} projectKey - The project key\n   * @return {Promise<String>} Resolves to version name string, as it exists in JIRA\n   */\n  async createProjectVersion(versionName, projectKey) {\n    let searchName = versionName.toLowerCase();\n    const versions = await this.jira.getVersions(projectKey);\n\n    const exists = versions.find(v => v.name.toLowerCase() == searchName);\n    if (exists) {\n      return exists;\n    }\n\n    const result = await this.jira.createVersion({\n      name: versionName,\n      project: projectKey\n    });\n    return result;\n  }\n\n  /**\n   * Retreive the jira issue by ID.\n   * Also attempt to match a slack user to the reporter's email address.\n   *\n   * @param {String} ticketId - The ticket ID of the issue to retrieve.\n   * @return {Promise} Resolves a jira issue object, with added `slackUser` property.\n   */\n  async getJiraIssue(ticketId) {\n    if (!this.jira) {\n      return Promise.reject('Jira is not configured.');\n    }\n\n    return this.jira.findIssue(ticketId).then((origTicket) => {\n      const ticket = Object.assign({}, origTicket);\n      return this.slack.findUser(ticket.fields.reporter.emailAddress, ticket.fields.reporter.displayName)\n      .then((slackUser) => {\n        ticket.slackUser = slackUser;\n        return ticket;\n      })\n      .catch(() => ticket);\n    });\n  }\n\n  /**\n   * Should ticket be included in changelog\n   * @param   {Object} ticket - Jira ticket object\n   * @returns {Boolean}\n   */\n  includeTicket(ticket) {\n    const type = ticket.fields.issuetype.name;\n    if (Array.isArray(this.config.jira.includeIssueTypes) && this.config.jira.includeIssueTypes.length) {\n      return this.config.jira.includeIssueTypes.includes(type);\n    }\n    else if (Array.isArray(this.config.jira.excludeIssueTypes)) {\n      return !this.config.jira.excludeIssueTypes.includes(type);\n    }\n  }\n\n  /**\n   * Gets all tickets associated with a commit\n   * @param   {Object} log - A commit's log object\n   * @returns {Array} List of tickets in commit\n   */\n  getTickets(log) {\n    const configPattern = this.config.jira.ticketIDPattern;\n    const searchPattern = new RegExp(configPattern.source, `${configPattern.flags || ''}g`);\n    return log.fullText.match(searchPattern) || [];\n  }\n}\n"],"file":"Jira.js"}