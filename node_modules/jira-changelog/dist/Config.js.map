{"version":3,"sources":["../src/Config.js"],"names":["CONF_FILENAME","getDefaultConfig","defaultConfig","readConfigFile","configPath","localConf","fs","accessSync","require","e","SyntaxError","console","log","stack","message","Object","keys","forEach","key","defVal","Array","isArray","assign"],"mappings":";;;;;;;;;AAOA;;AACA;;AAKA;;;;AAbA;;;;;;;AAUA;;;;AAMA;;;;AAIO,MAAMA,aAAa,GAAG,qBAAtB;AAEP;;;;;;AAGO,SAASC,gBAAT,GAA4B;AACjC,SAAOC,wBAAP;AACD;AAED;;;;;;;;AAMO,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AACzC,MAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAI;AACF;AACAC,gBAAGC,UAAH,CAAcH,UAAd;;AACAC,IAAAA,SAAS,GAAGG,OAAO,CAACJ,UAAD,CAAnB;AACD,GAJD,CAIE,OAAMK,CAAN,EAAS;AACT,QAAIA,CAAC,YAAYC,WAAjB,EAA8B;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACI,KAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACK,OAAd;AACD;AACF,GAbwC,CAezC;;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYd,wBAAZ,EAA2Be,OAA3B,CAAoCC,GAAD,IAAS;AAC1C,UAAMC,MAAM,GAAGjB,yBAAcgB,GAAd,CAAf;;AAEA,QAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAnC,EAA0D;AACxDd,MAAAA,SAAS,CAACa,GAAD,CAAT,GAAiBH,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBH,MAAlB,EAA0Bd,SAAS,CAACa,GAAD,CAAT,IAAkB,EAA5C,CAAjB;AACD,KAFD,MAGK,IAAI,OAAOb,SAAS,CAACa,GAAD,CAAhB,IAAyB,WAA7B,EAA0C;AAC7Cb,MAAAA,SAAS,CAACa,GAAD,CAAT,GAAiBC,MAAjB;AACD;AACF,GATD;AAWA,SAAOd,SAAP;AACD","sourcesContent":["/**\n * Manages the command configuration files.\n *\n * If the `changelog.conf.js` file is in the directory the script is run in\n * these returned settings will overwrite the defaults.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * Default config object\n */\nimport defaultConfig from './changelog.config.js';\n\n\n/**\n * Name of the local config files.\n * Put this file in the directory where you call the jira-changelog command.\n */\nexport const CONF_FILENAME = 'changelog.config.js';\n\n/**\n * Return the default config object.\n */\nexport function getDefaultConfig() {\n  return defaultConfig;\n}\n\n/**\n * Reads the config file, merges it with the default values and returns the object.\n *\n * @param {String} configPath - The path to the config file.\n * @return {Object} Configuration object.\n */\nexport function readConfigFile(configPath) {\n  let localConf = {};\n\n  try {\n    // Check if file exists\n    fs.accessSync(configPath);\n    localConf = require(configPath);\n  } catch(e) {\n    if (e instanceof SyntaxError) {\n      console.log('Error reading changelog.config.js:');\n      console.log(e.stack);\n      console.log(e.message);\n    }\n  }\n\n  // Merge first level with default\n  Object.keys(defaultConfig).forEach((key) => {\n    const defVal = defaultConfig[key];\n\n    if (typeof defVal === 'object' && !Array.isArray(defVal)) {\n      localConf[key] = Object.assign({}, defVal, localConf[key] || {});\n    }\n    else if (typeof localConf[key] == 'undefined') {\n      localConf[key] = defVal;\n    }\n  });\n\n  return localConf;\n}\n\n\n"],"file":"Config.js"}