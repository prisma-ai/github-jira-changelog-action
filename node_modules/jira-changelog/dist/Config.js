"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultConfig = getDefaultConfig;
exports.readConfigFile = readConfigFile;
exports.CONF_FILENAME = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _changelogConfig = _interopRequireDefault(require("./changelog.config.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Manages the command configuration files.
 *
 * If the `changelog.conf.js` file is in the directory the script is run in
 * these returned settings will overwrite the defaults.
 */

/**
 * Default config object
 */

/**
 * Name of the local config files.
 * Put this file in the directory where you call the jira-changelog command.
 */
const CONF_FILENAME = 'changelog.config.js';
/**
 * Return the default config object.
 */

exports.CONF_FILENAME = CONF_FILENAME;

function getDefaultConfig() {
  return _changelogConfig.default;
}
/**
 * Reads the config file, merges it with the default values and returns the object.
 *
 * @param {String} configPath - The path to the config file.
 * @return {Object} Configuration object.
 */


function readConfigFile(configPath) {
  let localConf = {};

  try {
    // Check if file exists
    _fs.default.accessSync(configPath);

    localConf = require(configPath);
  } catch (e) {
    if (e instanceof SyntaxError) {
      console.log('Error reading changelog.config.js:');
      console.log(e.stack);
      console.log(e.message);
    }
  } // Merge first level with default


  Object.keys(_changelogConfig.default).forEach(key => {
    const defVal = _changelogConfig.default[key];

    if (typeof defVal === 'object' && !Array.isArray(defVal)) {
      localConf[key] = Object.assign({}, defVal, localConf[key] || {});
    } else if (typeof localConf[key] == 'undefined') {
      localConf[key] = defVal;
    }
  });
  return localConf;
}
//# sourceMappingURL=Config.js.map