"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Slack = _interopRequireDefault(require("./Slack"));

var _simpleGit = _interopRequireDefault(require("simple-git"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Connect to the source control system and return commit logs for a range.
 * Currenty this only connects to git.
 *
 * Range Object
 * ------------
 * The range object should contain at least one of the following properties:
 * ```
 * {
 *   from:   {String}  The commit revision or branch name to start from, inclusive.
 *   to:     {String}  The commit revision or branch name to go to, inclusive.
 *   after:  {DateStr} Only commits after this date.
 *   before: {DateStr} Only comits before this date.
 * }
 * ```
 *
 *
 * Commit Log Object
 * ------------------
 * Each commit log object will look like the following:
 *
 * ```
 * {
 *   revision: <commit revision hash>,
 *   date: <date>,
 *   summary: <short commit message>,
 *   fullText: <full commit message>,
 *   authorName: <name of commit author>,
 *   authorEmail: <email of commit author>,
 *   slackUser: <object of slack user, as matched by authorEmail>
 * }
 * ```
 *
 */
class SourceControl {
  constructor(config) {
    this.slack = new _Slack.default(config);
  }
  /**
   * Return commit logs for a range.
   *
   * @param {String} dir The source control workspace directory.
   * @param {Object} range An object defining the range boundaries (see above)
   *
   * @return {Promsie} Resolves to a list of commit objects
   */


  getCommitLogs(workspaceDir, range) {
    const workspace = (0, _simpleGit.default)(workspaceDir);
    return new Promise((resolve, reject) => {
      const opts = _objectSpread({
        format: {
          revision: '%H',
          date: '%ai',
          summary: '%s%d',
          fullText: '%s%d%b',
          authorName: '%aN',
          authorEmail: '%ae'
        },
        '--no-merges': true
      }, range);

      workspace.log(opts, (err, response) => {
        if (err) {
          return reject(err);
        }

        const logs = response.all; // Add slack users to commit logs

        const promises = logs.map(log => {
          return this.slack.findUser(log.authorEmail, log.authorName).catch(err => {
            console.log(err);
          }) // ignore errors
          .then(slackUser => {
            log.slackUser = slackUser;
            return log;
          });
        });
        promises.push(Promise.resolve());
        Promise.all(promises).then(() => {
          resolve(logs);
        });
      });
    });
  }

}

exports.default = SourceControl;
//# sourceMappingURL=SourceControl.js.map